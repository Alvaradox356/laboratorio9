{"version":3,"sources":["components/TodoForm.js","App.js","registerServiceWorker.js","index.js"],"names":["TodoForm","state","carnet","schedule","tarde","handleInputChange","bind","handleSubmit","e","preventDefault","this","props","onAddTodo","setState","target","value","name","console","log","className","onSubmit","for","class","type","onChange","placeholder","Component","App","todos","handleAddTodo","index","filter","i","todo","map","key","onClick","removeTodo","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.b3c478b0.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass TodoForm extends Component {\n  constructor() {\n    super();\n    this.state = {\n      carnet: '',\n      schedule: 'Lunes de 9:00 a 11.00',\n      tarde: ''\n    };\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    this.props.onAddTodo(this.state);\n    this.setState({\n      carnet: '',\n      schedule: 'Lunes de 9:00 a 11.00',\n      tarde: ''\n    });\n  }\n\n  handleInputChange(e) {\n    const { value, name } = e.target;\n    console.log(value, name);\n    this.setState({\n      [name]: value\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <form onSubmit={this.handleSubmit} className=\"jumbotron\">\n          <h1>\n            Registro de laboratorio.\n            </h1>\n          <div className=\"form-group\">\n            <label for=\"carnet\" class=\"col-sm-2 col-form-label\">Ingrese el carnet: </label><br></br>\n            <input\n              type=\"text\"\n              name=\"carnet\"\n              className=\"form-control\"\n              value={this.state.carnet}\n              onChange={this.handleInputChange}\n              placeholder=\"Carnet\"\n            />\n          </div>\n          <div className=\"form-group\">\n            <label for=\"schedule\">Seleccione el horario:</label>\n            <select\n              name=\"schedule\"\n              className=\"form-control\"\n              value={this.state.schedule}\n              onChange={this.handleInputChange}\n            >\n              <option>Lunes de 9:00 a 11.00</option>\n              <option>Martes de 13:30 a 15:30</option>\n              <option>Mi√©rcoles de 9:00 a 11.00</option>\n              <option>Jueves de 13:30 a 15:30</option>\n              <option>Viernes de 9:00 a 11.00</option>\n              <option>Viernes de 15:30 a 17:30</option>\n            </select>\n          </div>\n          <div className=\"form-group\">\n            <label for=\"schedule\">Tarde?</label>\n            <select\n              name=\"tarde\"\n              className=\"form-control\"\n              value={this.state.tarde}\n              onChange={this.handleInputChange}\n            >\n              <option>A tiempo</option>\n              <option>Tardisimo</option>\n            </select>\n          </div>\n\n          <div class=\"form-group\">\n            <button type=\"submit\" className=\"btn btn-primary\">\n              Guardar\n          </button>\n          </div>\n\n        </form>\n      </div>\n    )\n  }\n\n}\n\nexport default TodoForm;\n","import React, { Component } from 'react';\nimport './App.css';\n\n// data\nimport { todos } from './todos.json';\n\n// subcomponents\nimport TodoForm from './components/TodoForm';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      todos\n    }\n    this.handleAddTodo = this.handleAddTodo.bind(this);\n  }\n\n  removeTodo(index) {\n    this.setState({\n      todos: this.state.todos.filter((e, i) => {\n        return i !== index\n      })\n    });\n  }\n\n  handleAddTodo(todo) {\n    this.setState({\n      todos: [...this.state.todos, todo]\n    })\n  }\n\n  render() {\n    const todos = this.state.todos.map((todo, i) => {\n      return (\n        <div className=\"col-md-4\" key={i}>\n          <div className=\"card mt-4\">\n            <div className=\"card-title text-center\">\n              <h3>{todo.carnet}</h3>\n              <span className=\"badge badge-pill badge-danger ml-2\">\n                {todo.schedule}\n              </span>\n              <span className=\"badge badge-pill badge-danger ml-2\">\n                {todo.tarde}\n              </span>\n            </div>\n            <div className=\"card-footer\">\n              <button\n                className=\"btn btn-danger\"\n                onClick={this.removeTodo.bind(this, i)}>\n                Eliminar\n              </button>\n            </div>\n          </div>\n          \n        </div>\n      )\n    });\n\n    // RETURN THE COMPONENT\n    return (\n      <div className=\"App\">\n\n        <div className=\"container\">\n          <div className=\"row mt-4\">\n\n            <div className=\"col-md-4 text-center\">\n              <TodoForm onAddTodo={this.handleAddTodo}></TodoForm>\n            </div>\n\n            <div className=\"col-md-8\">\n              <div className=\"row cartas\">\n                {todos}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}